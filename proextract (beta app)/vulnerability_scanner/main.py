import asyncio
import schedule
import time
from src.scraper.html_scraper import HTMLScraper
from src.scraper.api_scraper import APIScraper
from src.parser.vulnerability_parser import VulnerabilityParser
from src.database.database import Database
from src.reporter.report_generator import ReportGenerator
from src.alerting.email_alerter import EmailAlerter
from src.alerting.slack_alerter import SlackAlerter
from src.alerting.sms_alerter import SMSAlerter
from src.ml.severity_predictor import SeverityPredictor
from src.utils.health_check import health_check
from src.logger import logger
import yaml

def load_config():
    with open('config/config.yaml', 'r') as file:
        return yaml.safe_load(file)

async def run_scanner():
    config = load_config()
    db = Database(config['database']['url'])
    parser = VulnerabilityParser()
    severity_predictor = SeverityPredictor()

    html_scraper = HTMLScraper(config['scraper']['html_urls'])
    api_scraper = APIScraper(config['scraper']['api_urls'], config['scraper']['api_key'])

    # Perform health checks
    for url in config['scraper']['html_urls'] + config['scraper']['api_urls']:
        if not health_check(url):
            logger.warning(f"Health check failed for {url}")

    # Scrape and process vulnerabilities
    html_vulnerabilities = await html_scraper.scrape()
    api_vulnerabilities = await api_scraper.scrape()

    all_vulnerabilities = html_vulnerabilities + api_vulnerabilities

    for vuln in all_vulnerabilities:
        parsed_vuln = parser.parse(vuln)
        predicted_severity = severity_predictor.predict(parsed_vuln['description'])
        parsed_vuln['predicted_severity'] = predicted_severity
        db.add_vulnerability(parsed_vuln)

        if parsed_vuln['severity'] in ['Critical', 'High']:
            # Send alerts
            EmailAlerter(config['alerting']['email']).send_alert(parsed_vuln)
            SlackAlerter(config['alerting']['slack']).send_alert(parsed_vuln)
            SMSAlerter(config['alerting']['sms']).send_alert(parsed_vuln)

    # Generate report
    report_generator = ReportGenerator(db)
    report_generator.generate_report()

def main():
    config = load_config()
    schedule.every(config['scanner']['interval']).hours.do(asyncio.run, run_scanner())

    while True:
        schedule.run_pending()
        time.sleep(1)

if __name__ == "__main__":
    main()

